= Mad Mimi Mailer

* http://developer.madmimi.com - Learn more about the API used by this gem
* http://madmimi.com - Sign up for a Mad Mimi account

== DESCRIPTION:

Let Mad Mimi handle your HTML emails. This is a drop-in replacement
for ActionMailer.  MadMimiMailer extends ActionMailer::Base, so you
can intermingle normal ActionMailer emails with emails sent via
Mad Mimi.  Just start your Mad Mimi-specific emails with
deliver_mimi_foo and it will send your Mad Mimi promotion named "foo".
Oh, and it will also automatically import the recipient into your
Mad Mimi account.

== TODO:

* If something goes wrong with the call to Mad Mimi, fallback and use plain old local Rails templates.
* Document how body data can be used in Mad Mimi templates
* Document promotion, hidden, and use_erb options

== SYNOPSIS:

  class UserNotifier < MadMimiMailer
    def mimi_welcome(user)
      subject "Welcome to WidgetHub"
      recipients user.email
      bcc ADMIN_PEEPS
      from "admin@example.com"
      body :username => user.name, :email => user.email, :password => user.password    
    end
  
    def reset(user)
      subject "Resetting your WidgetHub account"
      recipients user.email
      bcc ADMIN_PEEPS
      from "admin@example.com"
      body :user => user
    end
  end

  MadMimiMailer.api_settings = {
    :username => 'dave@example.com',
    :api_key => '75a6c6f1SomeFakeApiKeycbcc300'
  }

  user = User.first

  # Sent via Mad Mimi
  UserNotifier.deliver_mimi_welcome(user)

  # Sent via good old ActionMailer
  UserNotifier.deliver_reset(user)

== API CHANGES:

As of 1 November Mad Mimi's mailer API is becoming asynchronous. To simulate synchronous behaviour
you can set _synchronous_ to true in the _synchronization_settings_:

  MadMimiMailer.synchronization_settings = {
    :synchronous => true,         # Defaults to false
    :timeout     => 5             # Defaults to 10
  }

If you would prefer to use the asynchronous behaviour you may need to check the
status of the mail: see http://madmimi.com/developer/mailer/status

  # Send api request to Mad Mimi and receive a transaction_id
  transaction_id = UserNotifier.deliver_mimi_welcome(user)
  
  # ... use transaction_id with subsequent status check to Mad Mimi, for example
  require 'rubygems'
  require 'httparty'

  class StatusChecker
    include HTTParty
    base_uri 'http://madmimi.com/'

    def self.go transaction_id
      username = 'you@username.com'
      key = 'your_api_key'
      get("/mailers/status/#{transaction_id}", :body => {
        :username => username,
        :api_key => key
      }).response
    end
  end

  done = false
  while !done
    response = StatusChecker.go relevant_transaction_id
    done = !%w(ignorant sending).include?(response)
    sleep(5) unless done
  end

  #... do stuff here ...
  

== REQUIREMENTS:

* A Mad Mimi account with Mailer API enabled
* ActionMailer


== INSTALL:

* sudo gem install gemcutter
* gem tumble
* sudo gem install mad_mimi_mailer


== LICENSE:

  (The MIT License)

  Copyright (c) 2009 Dave Hoover, Obtiva Corporation

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  'Software'), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
